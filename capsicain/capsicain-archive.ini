# Capsicain config file

# This is the (very complex) config that I use myself.
# Check capsicain.example.ini for something simpler.
# Config 1+2 use my "KingCon / King Configuration"; its aim is that no finger must move more than one key (like the King in Chess)
# Requires that the Windows keyboard layout is set to standard US-English

#.ini versions:
#v35: new map for alt chars, new tappedAlt chars
#v36: KEY_MODIFIER_IFTAPPED_MAPPING
#v37: add LControlBlocksAlphaMapping, ProcessOnlyFirstKeyboard
#v38: add Workman Std, Colemak, Dvorak. Now with layerName
#v38b: rename to LControlLWinBlocksAlphaMapping
#v38c: add special chars ╔═╗║║╚╝╠╣╩╦ ┌─┐││└┘├┤┴┬ º¹²³
#v39: comment char is now #
#V40: changed key labels from 'DOT' to '.' and all similar cases. '[' was a pain...
#v41: introduced ALPHA_FROM-ALPHA_TO-ALPHA_END.
#v42: cleanup
#v43: changed some NumPad key labels, put ┌─┐╚═╝ on NumPad
#v44: enabled layer-specific sections (undone with v45...)
#v45: modular; tagged lines with INCLUDE, GLOBAL/OPTION/REWIRE/COMBO/ALPHA_FROM-ALPHA_TO-ALPHA_END
#v46: sequence() function. Redefine mod state to &^T. Rename ShiftShiftToShiftLock
#v46b: rules for capsAlt-H,S,D,F and caps-QWER, YXCVB
#v47: can map key to ESC. REWIRE for non-modifiers too. map A B LOCK
#v47b: remove LOCKs. Too many accidents. Experimental section that reuses the number row.
#v48: cleanup. Can now map GRAVE to ESC (eXit and layer change require original ESC key). 
#v49: removed REWIRE A B LOCK. Lock with ESC+modifier, unlock with ESC. Much more reliable.
#v49b: suppress Win tapped
#v50: alt+space=return
#v51: Tab+Number=Function key
#v52: undo alt+space=return. Too many fast-typing accidents.
#v52b: documentation on new SC_0XNN labels
#v52c: cleaned old references to tag "MODIFIER"
#v52d: new layer 8 for testing sequences
#v53: add 3 new GLOBAL for startup options
#v54: replace ShiftShiftToShiftLock with COMBOs
#v55: add GLOBAL StartAHK
#v56: new TapHold+Alt style
#v57: replace PAUSE:1 with SLEEP:100 (now milliseconds)
#v58: remove '^' defs from moddedKey(). Now all modifiers are released, then restored after the moddedKey send.
#v59: rewire LWin MOD11 // LWIN
#v59: add dead keys and diacritics àèìòùÀÈÌÒÙ áéíóúÁÉÍÓÚ âêîôûÂÊÎÔÛ çÇ / äëïöüÿÄËÏÖÜŸ ãñõÃÑÕ øØ åÅ æÆœŒ šŠžŽ / §™±
#v60: add my windows shortcuts
#v61: remove obsolete GLOBAL delayOnStartup
#v62: change all AHK triggers to F14/F15
#v63: add capsicainEnableDisableKey
#v64: change name to capsicainOnOffKey
#i65: Test CAPS+F1..F10 for layer switch. CAPS+F12 for previous layer
#i66: Remove reference sections. It's all in the wiki now https://github.com/cajhin/capsicain/wiki
#i67: Find&Replace all "Layer">"Config", and "layer">"config"
#i68: WinAlt D -> F15+u = wsl.exe
#i69: define combos for macros
#i70: allow ALT+NumPad combo for virtual numpad (e.g. with Alt+Tab+M=NP1) 
#i71: record macros with Ctrl+Caps+Number, play with Ctrl+TapCaps+Number
#i72: new GLOBALS DontTranslateMessyKeys, DontProtectConsole
#i73: ctrl+both shift for Caps toggle (needed in case of Linux VM with grabbed keyboard)

GLOBAL IniVersion ini73
                #any string, so you can check with Status [ESC]+[S] if you're using the right config


GLOBAL ActiveConfigOnStartup 1
                #This config is active on startup. Default=1
                #Switch config with [ESC]+[0..9]  
                #0=hardcoded = no changes at all, Only listen to config change (ESC + number)
                #1=QwertzJ  with KingCon
                #2=WorkmanJ with KingCon
                #3=Workman std
                #4=Colemak std
                #5=Colemak Angle-Mod-DH
                #6=Dvorak simplified US
                #9=Test config

#GLOBAL StartMinimized
                #start capsicain minimized in the taskbar
#GLOBAL StartInTaskbar
                #start capsicain with a traybar icon instead. Toggle traybar<>taskbar with ESC+T

GLOBAL StartAHK
                #on startup, start autohotkey.exe if it is not running. Must be in the same directory as capsicain.exe.

#GLOBAL capsicainOnOffKey NUMLOCK
                #This physical key toggles ON/OFF

GLOBAL DebugOnStartup
                #this is a developer feature; Debugging output during startup

#GLOBAL DontProtectConsole
                #pause and exit signals will kill capsicain when console is in foreground (Pause, Ctrl+Pause, Ctrl+ScrLock, Ctrl+NumLock)

#GLOBAL DontTranslateMessyKeys  #don't touch PRINT, SCRLOCK and PAUSE

OPTION processOnlyFirstKeyboard

[CONFIG_3]
OPTION debug
OPTION configName DReverseMod7

COMBO A [&.] > key (B)
COMBO M [.... .... ..&.] > moddedKey( LWIN + R )
COMBO M [.... .... ...&] > moddedKey( LWIN + R )

[CONFIG_1]
# OPTIONS
OPTION debug
OPTION configName ReverseMod7
            
# REWIRES
REWIRE LSHF F13
REWIRE RSHF F14
REWIRE F3 MOD14 // F3
REWIRE F4 BSP
REWIRE F5 LALT
REWIRE F6 MOD14
REWIRE 3 RET
REWIRE 4 SPACE
REWIRE 5 DEL
REWIRE 7 LCTRL
REWIRE 8 LSHF // MOD12
REWIRE 9 MOD13
REWIRE SPACE MOD11

# MOD11 / SPACE COMBOS
COMBO M [... .&.. .... ....] > moddedKey(T+&&)
COMBO Z [... .&.. .... ....] > moddedKey(TAB+&.)
COMBO X [... .&.. .... ....] > moddedKey(TAB+&&)
COMBO Q [... .&.. .... ....] > moddedKey(TAB+&...)
COMBO W [... .&.. .... ....] > moddedKey(TAB+&..&)

# MOD13+MOD12=LEVEL 5 COMBOS
COMBO F14 [..& &... .... ....] > key(ESC)
COMBO / [..& &... .... ....] > key(NOP)
COMBO . [..& &... .... ....] > key(NOP)
COMBO , [..& &... .... ....] > key(NOP)
COMBO M [..& &... .... ....] > key(NOP)
COMBO ' [..& &... .... ....] > key(NOP)
COMBO ; [..& &... .... ....] > key(NOP)
COMBO L [..& &... .... ....] > key(NOP)
COMBO K [..& &... .... ....] > key(NOP)
COMBO J [..& &... .... ....] > key(NOP)
COMBO [ [..& &... .... ....] > key(NOP)
COMBO P [..& &... .... ....] > key(NOP)
COMBO O [..& &... .... ....] > key(NOP)
COMBO I [..& &... .... ....] > key(NOP)
COMBO U [..& &... .... ....] > key(NOP)
COMBO V [..& &... .... ....] > moddedKey(\+&)
COMBO C [..& &... .... ....] > key([)
COMBO X [..& &... .... ....] > key(])
COMBO Z [..& &... .... ....] > key(NOP)
COMBO F13 [..& &... .... ....] > key(NOP)
COMBO F [..& &... .... ....] > key(NOP)
COMBO D [..& &... .... ....] > moddedKey([+&)
COMBO S [..& &... .... ....] > moddedKey(]+&)
COMBO A [..& &... .... ....] > key(NOP)
COMBO CAPS [..& &... .... ....] > key(NOP)
COMBO R [..& &... .... ....] > key(NOP)
COMBO E [..& &... .... ....] > key(NOP)
COMBO W [..& &... .... ....] > key(NOP)
COMBO Q [..& &... .... ....] > key(NOP)
COMBO TAB [..& &... .... ....] > key(F5)

# MOD3 LEVEL 3 COMBOS
COMBO MOD14 [..& .... .... ....] > key(LWIN)
COMBO F14 [..& .... .... ....] > key(NOP)
COMBO / [..& .... .... ....] > moddedKey(6+&)
COMBO . [..& .... .... ....] > moddedKey(-+&)
COMBO , [..& .... .... ....] > key(NOP)
COMBO M [..& .... .... ....] > key(NOP)
COMBO ' [..& .... .... ....] > key(\)
COMBO ; [..& .... .... ....] > key(/)
COMBO L [..& .... .... ....] > moddedKey(2+&)
COMBO K [..& .... .... ....] > key(NOP)
COMBO J [..& .... .... ....] > key(NOP)
COMBO [ [..& .... .... ....] > moddedKey(3+&)
COMBO P [..& .... .... ....] > key(NOP)
COMBO O [..& .... .... ....] > moddedKey(`+&)
COMBO I [..& .... .... ....] > moddedKey(4+&)
COMBO U [..& .... .... ....] > moddedKey(7+&)
COMBO V [..& .... .... ....] > moddedKey(1+&)
COMBO C [..& .... .... ....] > moddedKey(,+&)
COMBO X [..& .... .... ....] > moddedKey(.+&)
COMBO Z [..& .... .... ....] > key(=)
COMBO F13 [..& .... .... ....] > key(;)
COMBO F [..& .... .... ....] > moddedKey(/+&)
COMBO D [..& .... .... ....] > moddedKey(9+&)
COMBO S [..& .... .... ....] > moddedKey(0+&)
COMBO A [..& .... .... ....] > key(-)
COMBO CAPS [..& .... .... ...^] > moddedKey(;+&)
COMBO R [..& .... .... ....] > moddedKey(=+&)
COMBO E [..& .... .... ....] > moddedKey(5+&)
COMBO W [..& .... .... ....] > moddedKey('+&)
COMBO Q [..& .... .... ....] > key(NOP)
COMBO TAB [..& .... .... ....] > key(NOP)

# MOD14 LEVEL 4 COMBOS
COMBO F3 [.&. .... .... ....] > key(LWIN)
COMBO MOD13 [.&. .... .... ....] > key(LWIN)
COMBO F14 [.&. .... .... ....] > key(ESC)
COMBO / [.&. .... .... ....] > key(PGUP)
COMBO . [.&. .... .... ....] > key(UP)
COMBO , [.&. .... .... ....] > key(PGDOWN)
COMBO M [.&. .... .... ....] > moddedKey(Z+&.)
COMBO ' [.&. .... .... ....] > key(HOME)
COMBO ; [.&. .... .... ....] > key(LEFT)
COMBO L [.&. .... .... ....] > key(DOWN)
COMBO K [.&. .... .... ....] > key(RIGHT)
COMBO J [.&. .... .... ....] > key(END)
COMBO [ [.&. .... .... ....] > key(NOP)
COMBO P [.&. .... .... ....] > key(TAB)
COMBO O [.&. .... .... ....] > moddedKey(x+&.)
COMBO I [.&. .... .... ....] > moddedKey(c+&.)
COMBO U [.&. .... .... ....] > moddedKey(v+&.)
COMBO V [.&. .... .... ....] > key(/)
COMBO C [.&. .... .... ....] > key(7)
COMBO X [.&. .... .... ....] > key(8)
COMBO Z [.&. .... .... ....] > key(9)
COMBO F13 [.&. .... .... ....] > key(-)
COMBO F [.&. .... .... ....] > moddedKey(8+&)
COMBO D [.&. .... .... ....] > key(4)
COMBO S [.&. .... .... ....] > key(5)
COMBO A [.&. .... .... ....] > key(6)
COMBO CAPS [.&. .... .... ....] > moddedKey(=+&)
COMBO R [.&. .... .... ....] > key(0)
COMBO E [.&. .... .... ....] > key(1)
COMBO W [.&. .... .... ....] > key(2)
COMBO Q [.&. .... .... ....] > key(3)
COMBO TAB [.&. .... .... ....] > key(.)

# ALPHAS
ALPHA_FROM  TAB  q    w    e     r    u     i    o   p    [    
            CAPS a    s    d     f    j     k    l   ;    '
            F13  z    x    c     v    m     ,    .   /    F14 
ALPHA_TO    /    .    ,    m     n    b     v    c   x    z    
            ;    l    k    j     h    g     f    d   s    a
            p    o    i    u     y    t     r    e   w    q
ALPHA_END
 
[CONFIG_2]
OPTION debug
OPTION configName QwertzJ-KingCon
INCLUDE KINGCON_ALL_SECTIONS_BUT_LAYOUT
INCLUDE LAYOUT_QWERTZJ

[CONFIG_2bb]
OPTION ConfigName WorkmanJ-KingCon
INCLUDE KINGCON_ALL_SECTIONS_BUT_LAYOUT
INCLUDE LAYOUT_WORKMANJ

[CONFIG_3iii]
OPTION ConfigName Workman_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_WORKMAN

[CONFIG_4]
OPTION ConfigName Colemak_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_COLEMAK

[CONFIG_5]
OPTION ConfigName Colemak_MOD
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_COLEMAK_MOD

[CONFIG_6]
OPTION ConfigName Dvorak_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_DVORAK

[CONFIG_7] #DEBUGGING
OPTION ConfigName Debugging
combo numlock [^.^^] > moddedkey(0 + .)
combo numlock [^.^&] > moddedkey(1 + .)
combo numlock [^.&^] > moddedkey(2 + .)
combo numlock [^.&&] > moddedkey(3 + .)
combo numlock [&.^^] > moddedkey(8 + .)
combo numlock [&.^&] > moddedkey(9 + .)
combo numlock [&.&^] > moddedkey(A + .)
combo numlock [&.&&] > moddedkey(B + .)
combo pause [^.^^] > moddedkey(0 + .)
combo pause [^.^&] > moddedkey(1 + .)
combo pause [^.&^] > moddedkey(2 + .)
combo pause [^.&&] > moddedkey(3 + .)
combo pause [&.^^] > moddedkey(8 + .)
combo pause [&.^&] > moddedkey(9 + .)
combo pause [&.&^] > moddedkey(A + .)
combo pause [&.&&] > moddedkey(B + .)

[CONFIG_8] #TESTING
OPTION ConfigName Testing
OPTION debug
REWIRE TAB MOD12 NOP
COMBO  M   [&^^^ .... ....] > sequence (&LSHF_&M_^M_^LSHF_&I_^I_&T_^T_&SPACE_^SPACE_&F_^F_&R_&E_^R_^E_&U_^U_&N_^N_&D_^D_&L_^L_&I_&C_&H_^I_^C_^H_&E_&N_^E_^N_&SPACE_^SPACE_&RSHF_&G_^RSHF_^G_&R_^R_&RALT_&NP1_^NP1_&NP2_^NP2_&NP9_^NP9_^RALT_&S_^S_&S_&E_^S_&N_^E_^N_&RET_^RET)

COMBO F1  [...& .... ....] > configSwitch(1)
COMBO F2  [...& .... ....] > configSwitch(2)
COMBO F3  [...& .... ....] > configSwitch(3)
COMBO F4  [...& .... ....] > configSwitch(4)
COMBO F5  [...& .... ....] > configSwitch(5)
COMBO F6  [...& .... ....] > configSwitch(6)
COMBO F7  [...& .... ....] > configSwitch(7)
COMBO F8  [...& .... ....] > configSwitch(8)
COMBO F9  [...& .... ....] > configSwitch(9)
COMBO F10 [...& .... ....] > layerSwitch(0)  //layerSwitch is now configSwitch, but still supported
COMBO F12 [...& .... ....] > configPrevious()

[CONFIG_9]  #TEST error handling
OPTION ConfigName Test
OPTION errorHandling
INCLUDE LAYOUT_QWERTZJ
ALPHA_FROM Y
ALPHA_TO   X
ALPHA_END
COMBO  M   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  M   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  N   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  N   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,10)
COMBO  O   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  O   [&^^& .... ....] > comboNtimes(LCTRL+UP,8)
REWIRE caps ralt nop
REWIRE caps ralt nop  #double definition, ignored
REWIRE caps ralt caps #redefinition, error
REWIRE caps lalt nop  #redefinition, error
REWIRE lalt MOD12 // lalt
#REWIRE rshf lshf nop  #both shift to lshift
REWIRE TAB MOD10
REWIRE L\ LSHF // lctrl
COMBO  X   [&^^^ .... ....] > sequence (&LSHF_&LSHF_&LSHF_&LSHF_&H_^H_^LSHF_&E_^E_&J_^J_&LSHF_&1_^1_^LSHF)  #Hello!
COMBO  C   [&^^^ .... ....] > sequence (&LSHF_H_^LSHF_e_l_l_o_&LSHF_1)  #error no lshf up
COMBO  V   [&^^^ .... ....] > sequence (&LSHF_H_^LSHF_e_l_l_o_SLEEP:1000_&LSHF_1_^LSHF_SLEEP:1000_h_o_w_SPACE_SLEEP:300_a_r_e_SLEEP:300_SPACE_Y_O_U_&LSHF_/_^LSHF)  #sleeps before sending !
REWIRE LCTRL NOP // LSHF
COMBO F11  [...& .... ....] > configSwitch(11) //should fail


#Collect the many sections for the 'KingCon' config into one 'super-module'
#The order of the includes may matter - the first matching rule always wins.
[KINGCON_ALL_SECTIONS_BUT_LAYOUT]
INCLUDE KINGCON_OPTIONS
INCLUDE KINGCON_REWIRE
INCLUDE KINGCON_PURE_MOD_COMBOS
INCLUDE KINGCON_CAPS_TO_CURSOR_CONTROL
INCLUDE KINGCON_CAPS_TO_CONTROL-X
INCLUDE KINGCON_MACROS
INCLUDE KINGCON_TAB_TO_NUMPAD
INCLUDE KINGCON_CAPS+TAB_TO_FUNCTION
INCLUDE KINGCON_ALT_TO_SPECIAL_CHARS
INCLUDE KINGCON_ALT_TO_GERMAN_CHARS
INCLUDE KINGCON_ALT_TAPPED+CAPS_TAPPED_TO_EXTRA_CHARS
INCLUDE KINGCON_ALT_TAPPED+CAPS_TAPPED+SHIFT_TO_SUPEREXTRA_CHARS
INCLUDE KINGCON_ALT_TAPPED_TO_VERY_SPECIAL_CHARS
INCLUDE KINGCON_ALT_TAPPED_TO_DEADKEYS
INCLUDE KINGCON_NUMPAD+CONTROL_TO_TABLE1
INCLUDE KINGCON_NUMPAD+CONTROL+SHIFT_TO_TABLE2
INCLUDE CAPS+NUMBERS_TO_AHK_CLIPBOARDS
INCLUDE WINDOWS_SHORTCUTS
INCLUDE SHOWOFF

# ╔════════════════════════════════════════════════════════════════════════╗
# ║     OPTIONS: ENABLE / DISABLE FEATURES                                 ║
# ║  You can comment out features you don't like.                          ║
# ╚════════════════════════════════════════════════════════════════════════╝
[KINGCON_OPTIONS]

#OPTION Debug          
                #verbose logging. Switch with [ESC]+[D]
				#This is 5x slower than without debug output, but you probably won't notice

OPTION DelayForKeySequenceMS 0 
                #System may drop keys when they are sent too fast. 
                #1 is the lower limit for reliable operation on some machines.
                #5 is the lower limit when I'm inside a Linux VM
                #Decrease/Increase with [ESC] + [,] and [.] keys
                #NOTE: for RDP sessions, you want to set 'Options > Local Resources > Apply Windows Key combinations: On this machine'.
                #      Otherwise you need 10+ ms delay for reliable key sequences, depending on the network.
                #NOTE: the Windows Sleep function is not precise; '1ms' may actually sleep 1 or 20ms depending on thread scheduling.

#OPTION ProcessOnlyFirstKeyboard
                #if there is more than one keyboard (e.g. laptop with USB keyboard attached), 
                #Capsicain will process only the board that sends the first key stroke. 
                #Useful to have a "debugging" board with standard behavior, or a guest board at your workplace.

#OPTION FlipYZ
                #flip Y and Z keys (US QWERTY to GER QWERTZ)
                #This is already defined in my Qwertz alpha mapping below.
                #The feature allows you to switch anytime without changing the config.
                #Switch with [ESC]+[Z]

OPTION FlipAltWinOnAppleKeyboards 
                #[ALT] <-> [WIN] on both sides because Apple keyboard on Windows is irritating.
                #This feature has no effect on PC keyboards.
                #Switch with [ESC]+[W]

OPTION LControlLWinBlocksAlphaMapping
                #Character keys are never remapped with ALPHA_FROM... when [LControl] or [LWin] is down.
                #I don't want Ctrl+C to move with a Dvorak layout.



# ╔════════════════════════════════════════════════════════════════════════╗
# ║     DEFINE 'HARD' KEY REWIRING                                         ║
# ╚════════════════════════════════════════════════════════════════════════╝
[KINGCON_REWIRE]
#          Key     To Key     (IfTapped) (IfTap+Hold)
REWIRE     L\      LSHF                          # L\ is the label for 'Left Backslash key'; it exists only on ISO boards (between Shift and Z).
REWIRE     /       RSHF
REWIRE     CAPS    MOD9
REWIRE     TAB     MOD10       TAB
REWIRE     LWIN    MOD11       //         LWIN
REWIRE     LALT    MOD12       //         LALT   # '//' means "don't process this optional thing"; in this case, tapped LALT does nothing
REWIRE     RALT    MOD12       //         RALT
REWIRE     `       ESC         
REWIRE     \       RET         


# ╔═════════════════════════════════════════════════════════════════════════════════════════╗
# ║     MODIFIER+KEY COMBOS BELOW                                                           ║
# ╚═════════════════════════════════════════════════════════════════════════════════════════╝

# ├┼┼┼┼┼┼────LETS GO────>

[KINGCON_PURE_MOD_COMBOS]
COMBO  LSHF   [.... ...& ....] > key(CAPSOFF)  #[RSHIFT] + [LSHIFT] = ShiftLock OFF.
COMBO  RSHF   [.... .... ..^&] > key(CAPSON)   #[LSHIFT] + [RSHIFT] = ShiftLock ON.
COMBO  RSHF   [.... .... ..&&] > key(CAPS)     #[LSHIFT] + [LCTRL] + [RSHIFT] = ShiftLock Toggle.
                #this makes the beautiful CapsLock key available for combos.
                #ON/OFF does not toggle: OFF means OFF, no matter what the current CapsLock state is.

[KINGCON_CAPS_TO_CURSOR_CONTROL]
# [CapsLock] summons Cursor control to the right hand
#        …  …  …  …  …  << >> ^  ^^ …  …
# CAPS   …  …  …  …  …  BS <  v  >  DL …
#        …  …  …  …     <! !> …  vv RSHF

    # Can be combined with the 8 regular modifiers. Other virtual modifiers must NOT be pressed.
COMBO  J   [^^^& .... ....] > key(LEFT)  #note that Caps + Shift + J will result in Shift + Left
COMBO  L   [^^^& .... ....] > key(RIGHT)
COMBO  I   [^^^& .... ....] > key(UP)
COMBO  K   [^^^& .... ....] > key(DOWN)
COMBO  N   [^^^& .... ....] > combo(LCTRL+LEFT)  #1 word left
COMBO  M   [^^^& .... ....] > combo(LCTRL+RIGHT) #1 word right

COMBO  H   [^^^& .... ....] > key(BSP)  # Backspace
COMBO  ;   [^^^& .... ....] > key(DEL)
COMBO  O   [^^^& .... ....] > key(PGUP)
COMBO  .   [^^^& .... ....] > key(PGDOWN)
COMBO  Y   [^^^& .... ....] > key(HOME)
COMBO  U   [^^^& .... ....] > key(END)

    #Caps (Mod9) + Alt (Mod12): BOLD cursor control. (the deleting keys are too dangerous here) 
COMBO  J   [&^^& .... ....] > comboNtimes(LEFT,8)
COMBO  L   [&^^& .... ....] > comboNtimes(RIGHT,8)
COMBO  I   [&^^& .... ....] > comboNtimes(UP,8)
COMBO  K   [&^^& .... ....] > comboNtimes(DOWN,8)
COMBO  N   [&^^& .... ....] > comboNtimes(LCTRL+LEFT,8)
COMBO  M   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  O   [&^^& .... ....] > comboNtimes(PGUP,10)
COMBO  .   [&^^& .... ....] > comboNtimes(PGDOWN,10)
COMBO  Y   [&^^& .... ....] > combo(LCTRL+HOME) #because caps+ctrl+Y is hard to press
COMBO  U   [&^^& .... ....] > combo(LCTRL+END)  #dito

COMBO  H   [&^^& .... ....] > sequence(HOME_HOME_&LSHF_END_RIGHT_^LSHF_DEL)  #delete whole line

[KINGCON_CAPS_TO_CONTROL-X]
# [CapsLock] and left hand: 
#       All   Top  Find  Next
#  Caps  Undo  Cut  Copy  Paste Redo
#         New   Tab  Open  Save  X-tab

#Undo Cut Copy Paste Redo
COMBO  A   [^^^& ^^^^ ^^^^] > combo(LCTRL + Z)
COMBO  S   [^^^& ^^^^ ^^^^] > combo(LCTRL+X)
COMBO  D   [^^^& ^^^^ ^^^^] > combo(LCTRL+C)
COMBO  F   [^^^& ^^^^ ^^^^] > combo(LCTRL+V)
COMBO  G   [^^^& ^^^^ ^^^^] > combo(LCTRL+Y)
#cut copy paste whole line with Caps+Alt
COMBO  S   [&^^& ^^^^ ^^^^] > sequence(HOME_HOME_&LSHF_END_RIGHT_^LSHF_&LCTRL_X_^LCTRL)  #cut whole line
COMBO  D   [&^^& ^^^^ ^^^^] > sequence(HOME_HOME_&LSHF_END_RIGHT_^LSHF_&LCTRL_C_^LCTRL)  #copy whole line
COMBO  F   [&^^& ^^^^ ^^^^] > sequence(HOME_HOME_&LCTRL_V_^LCTRL)  #paste at line start
#all, top, find, find-next
COMBO  Q   [^^^& ^^^^ ^^^^] > combo(LCTRL+A)
COMBO  W   [^^^& ^^^^ ^^^^] > combo(LCTRL+HOME)
COMBO  E   [^^^& ^^^^ ^^^^] > combo(LCTRL+F)
COMBO  R   [^^^& ^^^. ^^^.] > combo(F3)      #find next F3, allow shift
#New, newTab, Open, Save, Close-Tab
COMBO  Z   [^^^& ^^^^ ^^^^] > combo(LCTRL+N)
COMBO  X   [^^^& ^^^^ ^^^^] > combo(LCTRL+T)
COMBO  C   [^^^& ^^^^ ^^^^] > combo(LCTRL+O)
COMBO  V   [^^^& ^^^^ ^^^^] > combo(LCTRL+S)
COMBO  B   [^^^& ^^^^ ^^^^] > combo(LCTRL+W)


[KINGCON_TAB_TO_NUMPAD]
# [TAB Config]
# summons the Numpad under the right hand.
# TAB  IN PR SL PA NL    -  7  8  9  .  *  /
#      …  SS …  …  …     BS 4  5  6  0  =
#      …  …  …  …  …     +  1  2  3  
#
# TAB+S -> Screenshot
# TAB+QWERT -> INSERT, PRINT, ScrollLock, PAUSE, NumLock

COMBO  M   [^^&^ .^^^ .^^^] > key(NP1)
COMBO  ,   [^^&^ .^^^ .^^^] > key(NP2)
COMBO  .   [^^&^ .^^^ .^^^] > key(NP3)
COMBO  J   [^^&^ .^^^ .^^^] > key(NP4)
COMBO  K   [^^&^ .^^^ .^^^] > key(NP5)
COMBO  L   [^^&^ .^^^ .^^^] > key(NP6)
COMBO  U   [^^&^ .^^^ .^^^] > key(NP7)
COMBO  I   [^^&^ .^^^ .^^^] > key(NP8)
COMBO  O   [^^&^ .^^^ .^^^] > key(NP9)
COMBO  ;   [^^&^ .^^^ .^^^] > key(NP0)

COMBO  Y   [^^&^ ^^^^ ^^^^] > key(NP-)
COMBO  H   [^^&^ ^^^^ ^^^^] > key(BSP)
COMBO  N   [^^&^ ^^^^ ^^^^] > key(NP+)
COMBO  P   [^^&^ ^^^^ ^^^^] > key(NP.)
COMBO  [   [^^&^ ^^^^ ^^^^] > key(NP*)
COMBO  ]   [^^&^ ^^^^ ^^^^] > key(NP/)
COMBO  '   [^^&^ ^^^^ ^^^^] > key(=) #'
COMBO  RET     [^^&^ ^^^^ ^^^^] > key(NPRET)

#extended numpad
#TAB  INSERT PRINT SCRLOCK PAUSE NUMLOCK
COMBO  Q   [^^&^ .... ....] > key(INS)
COMBO  W   [^^&^ .... ....] > key(PRINT)   #aka 'SYSRQ'
COMBO  E   [^^&^ .... ....] > key(SCRLOCK) #[ScrollLock]
COMBO  R   [^^&^ .... ....] > key(PAUSE)   #[Pause]
COMBO  T   [^^&^ .... ....] > key(NUMLOCK)
COMBO  S   [^^&^ .... ....] > moddedKey(PRINT + .... .... &...) #ALT+PRINT screenshot of active window


[KINGCON_CAPS+TAB_TO_FUNCTION] 
# Function keys on the virtual NumPad (not that great, unless your keyboard has no dedicated number keys)

# TAB    …  …  …  …  …        F7 F8 F9 F11 F12 \
# CAPS   …  …  …  …  …        F4 F5 F6 F10 '  ENTER 
# LS||H  …  …  …  …  …        F1 F2 F3 /   RSHIFT   

COMBO  M   [^^&& .... ....] > key(F1)
COMBO  ,   [^^&& .... ....] > key(F2)
COMBO  .   [^^&& .... ....] > key(F3)
COMBO  J   [^^&& .... ....] > key(F4)
COMBO  K   [^^&& .... ....] > key(F5)
COMBO  L   [^^&& .... ....] > key(F6)
COMBO  U   [^^&& .... ....] > key(F7)
COMBO  I   [^^&& .... ....] > key(F8)
COMBO  O   [^^&& .... ....] > key(F9)
COMBO  ;   [^^&& .... ....] > key(F10)
COMBO  P   [^^&& .... ....] > key(F11)
COMBO  L\  [^^&& .... ....] > key(F12)

#Tab+Number=Function
COMBO  1   [^^&^ .... ....] > key(F1)
COMBO  2   [^^&^ .... ....] > key(F2)
COMBO  3   [^^&^ .... ....] > key(F3)
COMBO  4   [^^&^ .... ....] > key(F4)
COMBO  5   [^^&^ .... ....] > key(F5)
COMBO  6   [^^&^ .... ....] > key(F6)
COMBO  7   [^^&^ .... ....] > key(F7)
COMBO  8   [^^&^ .... ....] > key(F8)
COMBO  9   [^^&^ .... ....] > key(F9)
COMBO  0   [^^&^ .... ....] > key(F10)
COMBO  -   [^^&^ .... ....] > key(F11)
COMBO  =   [^^&^ .... ....] > key(F12)
    
#For Function keys, restore the standard ALT key
COMBO  F1      [&^^^ .... ....] > moddedKey(F1 + &...)
COMBO  F2      [&^^^ .... ....] > moddedKey(F2 + &...)
COMBO  F3      [&^^^ .... ....] > moddedKey(F3 + &...)
COMBO  F4      [&^^^ .... ....] > moddedKey(F4 + &...)
COMBO  F5      [&^^^ .... ....] > moddedKey(F5 + &...)
COMBO  F6      [&^^^ .... ....] > moddedKey(F6 + &...)
COMBO  F7      [&^^^ .... ....] > moddedKey(F7 + &...)
COMBO  F8      [&^^^ .... ....] > moddedKey(F8 + &...)
COMBO  F9      [&^^^ .... ....] > moddedKey(F9 + &...)
COMBO  F10     [&^^^ .... ....] > moddedKey(F10 + &...)
COMBO  F11     [&^^^ .... ....] > moddedKey(F11 + &...)
COMBO  F12     [&^^^ .... ....] > moddedKey(F12 + &...)

#For NumPad Function keys, restore the standard ALT key
COMBO  M   [&^&& .... ....] > moddedKey(F1 + &...)
COMBO  ,   [&^&& .... ....] > moddedKey(F2 + &...)
COMBO  .   [&^&& .... ....] > moddedKey(F3 + &...)
COMBO  J   [&^&& .... ....] > moddedKey(F4 + &...)
COMBO  K   [&^&& .... ....] > moddedKey(F5 + &...)
COMBO  L   [&^&& .... ....] > moddedKey(F6 + &...)
COMBO  U   [&^&& .... ....] > moddedKey(F7 + &...)
COMBO  I   [&^&& .... ....] > moddedKey(F8 + &...)
COMBO  O   [&^&& .... ....] > moddedKey(F9 + &...)
COMBO  ;   [&^&& .... ....] > moddedKey(F10 + &...)
COMBO  P   [&^&& .... ....] > moddedKey(F11 + &...)
COMBO  [   [&^&& .... ....] > moddedKey(F12 + &...)

#For Tab+Number Function keys, restore the standard ALT key
COMBO  1   [&^&^ .... ....] > moddedKey(F1 + &...)
COMBO  2   [&^&^ .... ....] > moddedKey(F2 + &...)
COMBO  3   [&^&^ .... ....] > moddedKey(F3 + &...)
COMBO  4   [&^&^ .... ....] > moddedKey(F4 + &...)
COMBO  5   [&^&^ .... ....] > moddedKey(F5 + &...)
COMBO  6   [&^&^ .... ....] > moddedKey(F6 + &...)
COMBO  7   [&^&^ .... ....] > moddedKey(F7 + &...)
COMBO  8   [&^&^ .... ....] > moddedKey(F8 + &...)
COMBO  9   [&^&^ .... ....] > moddedKey(F9 + &...)
COMBO  0   [&^&^ .... ....] > moddedKey(F10 + &...)
COMBO  -   [&^&^ .... ....] > moddedKey(F11 + &...)
COMBO  =   [&^&^ .... ....] > moddedKey(F12 + &...)


[KINGCON_ALT_TO_SPECIAL_CHARS]
# [MOD12 (ALT) Config]  Special Characters
# TAB    !¡ @  #  $  %     ^  &  (  )  ?¿ ü  ß 
# CAPS   -  +  *  /  =     BS \  {  }  ö  ä 
# LS||H  `  ~  |  _  …     <  >  [  ] 

# Some duplicates, because a lot of programmer's key are on the right pinky,
# which stretches a lot and causes issues for me.

    #top row
    #the characters for US Shift+Numbers, but one row lower. Same fingers less stretch.
COMBO  Q   [&^^^ ...^ ...^] > moddedKey(1 + .... ...&) #!
COMBO  Q   [&^^^ ...| ...|] > altChar(0161)            #¡
COMBO  W   [&^^^ .... ....] > moddedKey(2 + .... ...&) #@
COMBO  E   [&^^^ .... ....] > moddedKey(3 + .... ...&) ##
COMBO  R   [&^^^ .... ....] > moddedKey(4 + .... ...&) #$
COMBO  T   [&^^^ .... ....] > moddedKey(5 + .... ...&) #%

COMBO  Y   [&^^^ .... ....] > moddedKey(6 + .... ...&) #^
COMBO  U   [&^^^ .... ....] > moddedKey(7 + .... ...&) #+
COMBO  I   [&^^^ .... ....] > moddedKey(9 + .... ...&) #(
COMBO  O   [&^^^ .... ....] > moddedKey(0 + .... ...&) #)
COMBO  P   [&^^^ ...^ ...^] > moddedKey(/ + .... ...&) #?
COMBO  P   [&^^^ ...| ...|] > altChar(0191)            #¿
    #middle row
COMBO  A   [&^^^ .... ....] > key(-) #-
COMBO  S   [&^^^ .... ....] > moddedKey(= + .... ...&) #+
COMBO  D   [&^^^ .... ....] > moddedKey(8 + .... ...&) #*
COMBO  F   [&^^^ .... ....] > key(/) #/
COMBO  G   [&^^^ .... ....] > key(=) #=

COMBO  H   [&^^^ .... ....] > key(BSP) #back
COMBO  J   [&^^^ .... ....] > key(\) #\
COMBO  K   [&^^^ .... ....] > moddedKey([ + .... ...&) #{
COMBO  L   [&^^^ .... ....] > moddedKey(] + .... ...&) #}
    #bottom row
COMBO  Z   [&^^^ .... ....] > key(`) #GRAVE
COMBO  X   [&^^^ .... ....] > moddedKey(` + .... ...&) #~
COMBO  C   [&^^^ .... ....] > moddedKey(\ + .... ...&) #|
COMBO  V   [&^^^ .... ....] > moddedKey(- + .... ...&) #_
COMBO  B   [&^^^ .... ....] > altChar(0133) # …

COMBO  N   [&^^^ .... ....] > moddedKey(, + .... ...&) #<
COMBO  M   [&^^^ .... ....] > moddedKey(. + .... ...&) #>
COMBO  ,   [&^^^ .... ....] > key([) #[
COMBO  .   [&^^^ .... ....] > key(]) #]
#No more Alt-Space to Enter --- too many typing errors
#COMBO  SPACE [&^^^ ^^^^ ^^^^] > key(RET)  #ENTER

[KINGCON_ALT_TO_GERMAN_CHARS]
#German chars:  ö ä ü ß  Ö Ä Ü 
#Capslock on/off has no impact, unfortunately
COMBO  '   [&... ...^ ...^] > altChar(132) #ä
COMBO  '   [&... ...| ...|] > altChar(142) #Ä
COMBO  ;   [&... ...^ ...^] > altChar(148) #ö
COMBO  ;   [&... ...| ...|] > altChar(153) #Ö
COMBO  [   [&... ...^ ...^] > altChar(129) #ü
COMBO  [   [&... ...| ...|] > altChar(154) #Ü
COMBO  ]   [&... .... ....] > altChar(225) #ß
    

[KINGCON_ALT_TAPPED+CAPS_TAPPED_TO_EXTRA_CHARS]
#Super Duper Extra Special chars with Tapped Alt + Tapped Caps (no shift)
# TAB   …  ε  …  …  …     …  …  …  …  …  …  …  
# CAPS   …  …  …  …  …     …  …  …  …  …  …  
#         …  …  …  …  …     …  …  …  …  …  

COMBO  E   [T..T .... ...^] > altChar(238) # ε lower case Epsilon



[KINGCON_ALT_TAPPED+CAPS_TAPPED+SHIFT_TO_SUPEREXTRA_CHARS]
#Super Duper Extra Hyper Special chars with Tapped Alt + Tapped Caps + Shift (just showing off here ;)
#These must be defined before the "Tapped Alt without Tapped Shift" combos

# TAB   …  Σ  …  …  …     …  …  …  …  …  …  … 
# CAPS   …  …  …  …  …     …  …  …  …  …  …   
# LSHIFT  …  …  …  …  …     …  …  …  …  …   

COMBO  E   [T..T .... ...&] > altChar(228) # Σ upper case Epsilon

        
[KINGCON_ALT_TAPPED_TO_VERY_SPECIAL_CHARS]
#Very Special chars with Tapped Alt

# ESC  ¹  ²  ³                       º
# TAB   …  €  …  …  ™     …  µ  …  …  …  …  …  ENTR
# CAPS   …  ±  °  …  ♀     …  …  …  …  …  …  E||NTR 
# LSHIFT   …  …  ©  …  …     ♂  …  …  …  …  SHIFT    
COMBO  0   [T... .... ....] > altChar(0186) #power 0
COMBO  1   [T... .... ....] > altChar(0185) #power 1
COMBO  2   [T... .... ....] > altChar(0178) #power 2
COMBO  3   [T... .... ....] > altChar(0179) #power 3
COMBO  E   [T... ...^ ...^] > altChar(0128) #Euro €
COMBO  C   [T... .... ..^.] > altChar(0169) #Copyright ©
COMBO  D   [T... .... ....] > altChar(248)  #Degree °
COMBO  M   [T... .... ....] > altChar(11)   #Male ♂
COMBO  F   [T... ...^ ...^] > altChar(12)   #Female ♀
COMBO  T   [T... .... ....] > altChar(0153) #TM ™
COMBO  S   [T... .... ....] > altChar(0177) # ±
COMBO  U   [T... .... ....] > altChar(0181) # µ
COMBO  P   [T... .... ....] > altChar(0167) # Paragraph §


[KINGCON_ALT_TAPPED_TO_DEADKEYS]
#define deadkeys
#French, Spanish with AltTap {key}
#Others with AltTap Shift+{key}
COMBO ' [T... ...^ ...^] > deadkey(')  # ' to accent Acute
COMBO ' [T... ...| ...|] > deadkey(U)  # shift-' to Umlaut
COMBO Z [T... .... ....] > deadkey(G)  # ` to accent Grave
COMBO Y [T... .... ....] > deadkey(C)  # ^ to accent Circonflex
COMBO , [T... .... ....] > deadkey(,)  # , to çÇedille
COMBO X [T... .... ....] > deadkey(T)  # ~ to Tilde
COMBO F [T... ...| ...|] > deadkey(/)  # / to Slash
COMBO O [T... ...| ...|] > deadkey(O)  # O to O
COMBO E [T... ...| ...|] > deadkey(E)  # A to Æ
COMBO V [T... ...| ...|] > deadkey(V)  # V to Š

#define characters altered by deadkeys
#source https://sites.psu.edu/symbolcodes/windows/codealt/
#DK:G Grave with AltTap Z (`)
COMBO DEADKEY-G  A [| ...|] > altChar(0192) #À
COMBO DEADKEY-G  E [| ...|] > altChar(0200) #È
COMBO DEADKEY-G  I [| ...|] > altChar(0204) #Ì
COMBO DEADKEY-G  O [| ...|] > altChar(0210) #Ò
COMBO DEADKEY-G  U [| ...|] > altChar(0217) #Ù
COMBO DEADKEY-G  A [^ ...^] > altChar(0224) #à
COMBO DEADKEY-G  E [^ ...^] > altChar(0232) #è
COMBO DEADKEY-G  I [^ ...^] > altChar(0236) #ì
COMBO DEADKEY-G  O [^ ...^] > altChar(0242) #ò
COMBO DEADKEY-G  U [^ ...^] > altChar(0249) #ù
#DK:' Acute with AltTap '
COMBO DEADKEY-'  A [| ...|] > altChar(0193) #Á
COMBO DEADKEY-'  E [| ...|] > altChar(0201) #É
COMBO DEADKEY-'  I [| ...|] > altChar(0205) #Í
COMBO DEADKEY-'  O [| ...|] > altChar(0211) #Ó
COMBO DEADKEY-'  U [| ...|] > altChar(0218) #Ú
COMBO DEADKEY-'  A [^ ...^] > altChar(0225) #á
COMBO DEADKEY-'  E [^ ...^] > altChar(0233) #é
COMBO DEADKEY-'  I [^ ...^] > altChar(0237) #í
COMBO DEADKEY-'  O [^ ...^] > altChar(0243) #ó
COMBO DEADKEY-'  U [^ ...^] > altChar(0250) #ú
#DK:C Circumflex with AltTap Z (^)
COMBO DEADKEY-C  A [| ...|] > altChar(0194) #Â
COMBO DEADKEY-C  E [| ...|] > altChar(0202) #Ê
COMBO DEADKEY-C  I [| ...|] > altChar(0206) #Î
COMBO DEADKEY-C  O [| ...|] > altChar(0212) #Ô
COMBO DEADKEY-C  U [| ...|] > altChar(0219) #Û
COMBO DEADKEY-C  A [^ ...^] > altChar(0226) #â
COMBO DEADKEY-C  E [^ ...^] > altChar(0234) #ê
COMBO DEADKEY-C  I [^ ...^] > altChar(0238) #î
COMBO DEADKEY-C  O [^ ...^] > altChar(0244) #ô
COMBO DEADKEY-C  U [^ ...^] > altChar(0251) #û
#DK:, with AltTap ,
COMBO DEADKEY-,  C [| ...|] > altChar(0199) #Ç
COMBO DEADKEY-,  C [^ ...^] > altChar(0231) #ç

#Uncommon diacritics with AltTap,Shift+{key}
#DK:U with AltTap Shift+' (")
COMBO DEADKEY-U  A [| ...|] > altChar(0196) #Ä
COMBO DEADKEY-U  E [| ...|] > altChar(0203) #Ë
COMBO DEADKEY-U  I [| ...|] > altChar(0207) #Ï
COMBO DEADKEY-U  O [| ...|] > altChar(0214) #Ö
COMBO DEADKEY-U  U [| ...|] > altChar(0220) #Ü
COMBO DEADKEY-U  Z [| ...|] > altChar(0159) #Ÿ
COMBO DEADKEY-U  A [^ ...^] > altChar(0228) #ä
COMBO DEADKEY-U  E [^ ...^] > altChar(0235) #ë
COMBO DEADKEY-U  I [^ ...^] > altChar(0239) #ï
COMBO DEADKEY-U  O [^ ...^] > altChar(0246) #ö
COMBO DEADKEY-U  U [^ ...^] > altChar(0252) #ü
COMBO DEADKEY-U  Z [^ ...^] > altChar(0255) #ÿ
#DK:~ with AltTap X (~)
COMBO DEADKEY-T  A [| ...|] > altChar(0195) #Ã
COMBO DEADKEY-T  N [| ...|] > altChar(0209) #Ñ
COMBO DEADKEY-T  O [| ...|] > altChar(0213) #Õ
COMBO DEADKEY-T  A [^ ...^] > altChar(0227) #ã
COMBO DEADKEY-T  N [^ ...^] > altChar(0241) #ñ
COMBO DEADKEY-T  O [^ ...^] > altChar(0245) #õ
#DK:/ with AltTap Shift+F (/)
COMBO DEADKEY-/  O [| ...|] > altChar(0216) #Ø
COMBO DEADKEY-/  O [^ ...^] > altChar(0248) #ø
#DK:O with AltTap Shift+O
COMBO DEADKEY-O  A [| ...|] > altChar(0197) #Å
COMBO DEADKEY-O  A [^ ...^] > altChar(0229) #å
#DK:E with AltTap Shift+E
COMBO DEADKEY-E  A [| ...|] > altChar(0198) #Æ
COMBO DEADKEY-E  A [^ ...^] > altChar(0230) #æ
COMBO DEADKEY-E  O [| ...|] > altChar(0140) #Œ
COMBO DEADKEY-E  O [^ ...^] > altChar(0156) #œ
#DK:V with AltTap Shift+V
COMBO DEADKEY-V  S [| ...|] > altChar(0138) #Š
COMBO DEADKEY-V  S [^ ...^] > altChar(0154) #š
COMBO DEADKEY-V  Y [| ...|] > altChar(0142) #Ž
COMBO DEADKEY-V  Y [^ ...^] > altChar(0158) #ž



[KINGCON_NUMPAD+CONTROL_TO_TABLE1]
# NumPad + Control = more special chars on the NumPad and the virtual NumPad
#┌──────────────────────────┬────┐
#│ rectangles with Tab+Ctrl │    │
#├──────────────────────────┼────┘
#│ aint't it quaint?        │    
#└──────────────────────────┘
    #PHYSICAL NUMPAD
    # .├┤┬
    # ┌─┐┴
    # │┼│
    # └─┘.
    # SP R

COMBO  NP-     [.... .... ..&^] > altChar(194)
COMBO  NP7     [.... .... ..&^] > altChar(218)
COMBO  NP8     [.... .... ..&^] > altChar(196)
COMBO  NP9     [.... .... ..&^] > altChar(191)
COMBO  NP/     [.... .... ..&^] > altChar(195)
COMBO  NP4     [.... .... ..&^] > altChar(179)
COMBO  NP5     [.... .... ..&^] > altChar(197)
COMBO  NP6     [.... .... ..&^] > altChar(179)
COMBO  NP*     [.... .... ..&^] > altChar(180)
COMBO  NP+     [.... .... ..&^] > altChar(193)
COMBO  NP1     [.... .... ..&^] > altChar(192)
COMBO  NP2     [.... .... ..&^] > altChar(196)
COMBO  NP3     [.... .... ..&^] > altChar(217)
COMBO  NP0     [.... .... ..&^] > moddedKey(SPACE + .)

    #VIRTUAL NUMPAD
    #   ┬┌─┐
    #   ├│┼│┤
    #   ┴└─┘
COMBO  Y   [^.&^ .... ..&^] > altChar(194)
COMBO  U   [^.&^ .... ..&^] > altChar(218)
COMBO  I   [^.&^ .... ..&^] > altChar(196)
COMBO  O   [^.&^ .... ..&^] > altChar(191)
COMBO  H   [^.&^ .... ..&^] > altChar(195)
COMBO  J   [^.&^ .... ..&^] > altChar(179)
COMBO  K   [^.&^ .... ..&^] > altChar(197)
COMBO  L   [^.&^ .... ..&^] > altChar(179)
COMBO  ;   [^.&^ .... ..&^] > altChar(180)
COMBO  N   [^.&^ .... ..&^] > altChar(193)
COMBO  M   [^.&^ .... ..&^] > altChar(192)
COMBO  ,   [^.&^ .... ..&^] > altChar(196)
COMBO  .   [^.&^ .... ..&^] > altChar(217)


[KINGCON_NUMPAD+CONTROL+SHIFT_TO_TABLE2]
# TAB + Control + Shift = even more special chars on the (virtual) NumPad
# ╔═══════════════════╦═══╗
# ║ same, with LShift ║   ║
# ╠═══════════════════╬═══╝
# ╚═══════════════════╝
#
    #PHYSICAL NUMPAD
    # .╠╣╦
    # ╔═╗╩┴
    # ║╬║
    # ╚═╝.
    # . .
COMBO  NP-     [.... .... ..&&] > altChar(203)
COMBO  NP7     [.... .... ..&&] > altChar(201)
COMBO  NP8     [.... .... ..&&] > altChar(205)
COMBO  NP9     [.... .... ..&&] > altChar(187)
COMBO  NP/     [.... .... ..&&] > altChar(204)
COMBO  NP4     [.... .... ..&&] > altChar(186)
COMBO  NP5     [.... .... ..&&] > altChar(206)
COMBO  NP6     [.... .... ..&&] > altChar(186)
COMBO  NP*     [.... .... ..&&] > altChar(185)
COMBO  NP+     [.... .... ..&&] > altChar(202)
COMBO  NP1     [.... .... ..&&] > altChar(200)
COMBO  NP2     [.... .... ..&&] > altChar(205)
COMBO  NP3     [.... .... ..&&] > altChar(188)
COMBO  NP0     [.... .... ..&&] > moddedKey(SPACE + .)

    #VIRTUAL NUMPAD
    #   ╦╔═╗
    #   ╠║╬║╣
    #   ╩╚═╝
COMBO  Y   [^.&^ .... ..&&] > altChar(203)
COMBO  U   [^.&^ .... ..&&] > altChar(201)
COMBO  I   [^.&^ .... ..&&] > altChar(205)
COMBO  O   [^.&^ .... ..&&] > altChar(187)
COMBO  H   [^.&^ .... ..&&] > altChar(204)
COMBO  J   [^.&^ .... ..&&] > altChar(186)
COMBO  K   [^.&^ .... ..&&] > altChar(206)
COMBO  L   [^.&^ .... ..&&] > altChar(186)
COMBO  ;   [^.&^ .... ..&&] > altChar(185)
COMBO  N   [^.&^ .... ..&&] > altChar(202)
COMBO  M   [^.&^ .... ..&&] > altChar(200)
COMBO  ,   [^.&^ .... ..&&] > altChar(205)
COMBO  .   [^.&^ .... ..&&] > altChar(188)
    

[CAPS+NUMBERS_TO_AHK_CLIPBOARDS]
# Caps + Numbers = AutoHotKey magic combos -> 10 clipboards
# Requires a corresponding AHK script.
COMBO  1   [^^^& ^^^^ ^^^^] > combo(F14+1)
COMBO  2   [^^^& ^^^^ ^^^^] > combo(F14+2)
COMBO  3   [^^^& ^^^^ ^^^^] > combo(F14+3)
COMBO  4   [^^^& ^^^^ ^^^^] > combo(F14+4)
COMBO  5   [^^^& ^^^^ ^^^^] > combo(F14+5)
COMBO  6   [^^^& ^^^^ ^^^^] > combo(F14+6)
COMBO  7   [^^^& ^^^^ ^^^^] > combo(F14+7)
COMBO  8   [^^^& ^^^^ ^^^^] > combo(F14+8)
COMBO  9   [^^^& ^^^^ ^^^^] > combo(F14+9)
COMBO  0   [^^^& ^^^^ ^^^^] > combo(F14+0)
    
COMBO  1   [^^^T ^^^^ ^^^^] > combo(F15+1)
COMBO  2   [^^^T ^^^^ ^^^^] > combo(F15+2)
COMBO  3   [^^^T ^^^^ ^^^^] > combo(F15+3)
COMBO  4   [^^^T ^^^^ ^^^^] > combo(F15+4)
COMBO  5   [^^^T ^^^^ ^^^^] > combo(F15+5)
COMBO  6   [^^^T ^^^^ ^^^^] > combo(F15+6)
COMBO  7   [^^^T ^^^^ ^^^^] > combo(F15+7)
COMBO  8   [^^^T ^^^^ ^^^^] > combo(F15+8)
COMBO  9   [^^^T ^^^^ ^^^^] > combo(F15+9)
COMBO  0   [^^^T ^^^^ ^^^^] > combo(F15+0)

[KINGCON_MACROS]
COMBO  U   [^^^T ^^^^ ^^&^] > recordSecretMacro(11) #U/P needs taps because Ctrl+Caps+U -> Ctrl+End
COMBO  U   [^^^T ^^^^ ^^^^] > playMacro(11)
COMBO  P   [^^^T ^^^^ ^^&^] > recordSecretMacro(12)
COMBO  P   [^^^T ^^^^ ^^^^] > playMacro(12)

COMBO  1   [^^^& ^^^^ ^^&^] > recordMacro(1)
COMBO  1   [^^^T ^^^^ ^^&^] > playMacro(1)
COMBO  2   [^^^& ^^^^ ^^&^] > recordMacro(2)
COMBO  2   [^^^T ^^^^ ^^&^] > playMacro(2)
COMBO  3   [^^^& ^^^^ ^^&^] > recordMacro(3)
COMBO  3   [^^^T ^^^^ ^^&^] > playMacro(3)
COMBO  4   [^^^& ^^^^ ^^&^] > recordMacro(4)
COMBO  4   [^^^T ^^^^ ^^&^] > playMacro(4)
COMBO  5   [^^^& ^^^^ ^^&^] > recordMacro(5)
COMBO  5   [^^^T ^^^^ ^^&^] > playMacro(5)
COMBO  6   [^^^& ^^^^ ^^&^] > recordMacro(6)
COMBO  6   [^^^T ^^^^ ^^&^] > playMacro(6)
COMBO  7   [^^^& ^^^^ ^^&^] > recordMacro(7)
COMBO  7   [^^^T ^^^^ ^^&^] > playMacro(7)
COMBO  8   [^^^& ^^^^ ^^&^] > recordMacro(8)
COMBO  8   [^^^T ^^^^ ^^&^] > playMacro(8)
COMBO  9   [^^^& ^^^^ ^^&^] > recordMacro(9)
COMBO  9   [^^^T ^^^^ ^^&^] > playMacro(9)
COMBO  0   [^^^& ^^^^ ^^&^] > recordMacro(10)
COMBO  0   [^^^T ^^^^ ^^&^] > playMacro(10)


[WINDOWS_SHORTCUTS]
#Restore the standard WIN combos I use
COMBO  L   [.&.. .... ....] > combo (LWIN + L)
COMBO  R   [.&.. .... ....] > combo (LWIN + R)
#MPC screenshot
COMBO  RET [...T ....] > moddedkey(S + [&&.&])
#Tapped Win > XYplorer OpenWith shortcuts
COMBO  O   [.T.. .... ....] > sequence (&LCTRL_&LALT_RET_^LALT_^LCTRL)       //openwith
COMBO  I   [.T.. .... ....] > sequence (&LCTRL_&LALT_RET_^LALT_^LCTRL_&I_^I) //irfanview
COMBO  L   [.T.. .... ....] > sequence (&LCTRL_&LALT_RET_^LALT_^LCTRL_&L_^L) //lhp
COMBO  A   [.T.. .... ....] > sequence (&LCTRL_&LALT_RET_^LALT_^LCTRL_&A_^A) //affinity
#Trigger "Windows actions" that AHK processes
COMBO  X   [.&.. .... ....] > combo (F14 + X)
COMBO  Z   [.&.. .... ....] > combo (F14 + Z)
COMBO  A   [.&.. .... ....] > combo (F14 + A)
COMBO  Q   [.&.. .... ....] > combo (F14 + Q)
COMBO  I   [.&.. .... ....] > combo (F14 + I)
COMBO  D   [^&.. .... ....] > combo (F14 + D)
COMBO  D   [&&.. .... ....] > combo (F15 + D)
COMBO  E   [.&.. .... ....] > combo (F14 + E)
COMBO  T   [.&.. .... ....] > combo (F14 + T)
COMBO  W   [.&.. .... ....] > combo (F14 + W)
COMBO  K   [.&.. .... ....] > combo (F14 + K)
COMBO  F   [.&.. .... ....] > combo (F14 + F)
COMBO  C   [.&.. .... ....] > combo (F14 + C)
COMBO  B   [.&.. .... ....] > combo (F14 + B)
COMBO  H   [.&.. .... ....] > combo (F14 + H)


[SHOWOFF]
#tapAlt, LCtrl * C -> "cajhin"
COMBO  J   [T... .... ..T.] > sequence(c_a_j_h_i_n)
#Show off the sequence (macro) feature
COMBO  H   [T... .... ..T.] > sequence (&LSHF_H_^LSHF_e_l_l_o_SPACE_SLEEP:500_W_O_R_L_D_SLEEP:1000_&LCtrl_LEFT_^LCtrl_&LSHF_RIGHT_^LSHF_SLEEP:700_DEL_SLEEP:500_&LSHF_W_^LSHF_END_SLEEP:500_,_SLEEP:1000_SPACE_h_o_w_SPACE_SLEEP:300_a_r_e_SLEEP:300_SPACE_Y_O_U_&LSHF_/_^LSHF)

#tapAlt, F, Y, I -> "for your info" (chained dead keys)
COMBO  F   [T^^^ .... ....] > deadkey(F)
COMBO deadkey-F Y [] > deadkey(Y)
COMBO deadkey-Y I [] > sequence(f_o_r_SPACE_y_o_u_r_SPACE_i_n_f_o)
#not designed for intense use. A new keyword would be nicer for that like 
#COMPOSE F Y I [T...] > print("For your info")


# ╔════════════════════════════════════════════════════════════════════════════╗
# ║     ALPHA MAPPING LAYOUTS BELOW                                            ║
# ╚════════════════════════════════════════════════════════════════════════════╝

[LAYOUT_QWERTZ]
ALPHA_FROM  Y  Z
ALPHA_TO    Z  Y
ALPHA_END

[LAYOUT_QWERTZJ]
# the Z<>Y flip on US<>German keyboards f*ks with my muscle memory, and I cannot reconfigure my typewriters to QWERTY. So, QWERTZ it is for me...
# Backslash key on ANSI is Return on ISO, and the other way around. This sucks when you switch boards -> map Backslash to Return and all boards are consistent.
ALPHA_FROM  Y  Z -   =   \
ALPHA_TO    Z  Y NOP NOP RET
ALPHA_END


[LAYOUT_WORKMAN]
#Original Workman layout
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
     z  x  c  v  b     n  m
ALPHA_TO
   q  d  r  w  b     j  f  u  p  ;   
    a  s  h  t  g     y  n  e  o  i
     z  x  m  c  v     k  l
ALPHA_END


[LAYOUT_WORKMANJ]
#Workman but with Shift, Enter and Z in the 'right' place
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '  \
     z  x  c  v  b     n  m  ,  .
ALPHA_TO
   q  d  r  w  b     z  f  u  p  ;  [  ]
    a  s  h  t  g     j  n  e  o  i  '  RET     # note the ' char triggers my editor
     y  x  m  c  v     k  l  ,  .
ALPHA_END



[LAYOUT_COLEMAK]
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
     z  x  c  v  b     n  m
ALPHA_TO
   q  w  f  p  g     j  l  u  y  ;
    a  r  s  t  d     h  n  e  i  o
     z  x  c  v  b     k  m
ALPHA_END


[LAYOUT_COLEMAK_MOD]
# Colemak_Angle-Mod-DH
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
  L\ z  x  c  v  b     n  m             # L\ = 'left backslash', only on ISO boards
ALPHA_TO
   q  w  f  p  b     j  l  u  y  ;
    a  r  s  t  g     k  n  e  i  o
  z  x  c  d  v  L\    m  h
ALPHA_END


[LAYOUT_DVORAK]
# DVORAK_Simplified_US
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '
     z  x  c  v  b     n  m  ,  .  /
ALPHA_TO
   '  ,  .  p  y     f  g  c  r  l  /  =     # closing the apos ' pair to help my editor
    a  o  e  u  i     d  h  t  n  s  -
     ;  q  j  k  x     b  m  w  v  z
ALPHA_END



[REFERENCE: Mapping of Scancodes to Key Labels]
# Removed. Press [ESC] + [H] for the list of all labels.
# To find the Label for a scancode, switch to debug mode with [ESC]+[D], press the key, and look at the first item of the debug line.
